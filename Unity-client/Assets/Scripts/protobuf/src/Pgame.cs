// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: def/pgame.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Pgame {

  /// <summary>Holder for reflection information generated from def/pgame.proto</summary>
  public static partial class PgameReflection {

    #region Descriptor
    /// <summary>File descriptor for def/pgame.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PgameReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9kZWYvcGdhbWUucHJvdG8SBXBnYW1lIjQKDlBsYXllcklkZW50aXR5Eg8K",
            "B3Jvb21faWQYASABKA0SEQoJcGxheWVyX2lkGAIgASgNIkEKD0pvaW5HYW1l",
            "UmVxdWVzdBIuCg9wbGF5ZXJfaWRlbnRpdHkYASABKAsyFS5wZ2FtZS5QbGF5",
            "ZXJJZGVudGl0eSJFChBKb2luR2FtZVJlc3BvbnNlEg8KB3N1Y2Nlc3MYASAB",
            "KAgSIAoIbWFwX2luZm8YAiABKAsyDi5wZ2FtZS5NYXBJbmZvIkEKD01hcElu",
            "Zm9SZWNlaXZlZBIuCg9wbGF5ZXJfaWRlbnRpdHkYASABKAsyFS5wZ2FtZS5Q",
            "bGF5ZXJJZGVudGl0eSLDAwoRR2FtZVN0YXR1c0NoYW5nZWQSLwoGc3RhdHVz",
            "GAEgASgOMh8ucGdhbWUuR2FtZVN0YXR1c0NoYW5nZWQuU3RhdHVzEjwKDXN0",
            "YXJ0aW5nX2luZm8YAiABKAsyJS5wZ2FtZS5HYW1lU3RhdHVzQ2hhbmdlZC5T",
            "dGFydGluZ0luZm8SRAoRY291bnRpbmdkb3duX2luZm8YAyABKAsyKS5wZ2Ft",
            "ZS5HYW1lU3RhdHVzQ2hhbmdlZC5Db3VudGluZ0Rvd25JbmZvEjIKCGVuZF9p",
            "bmZvGAQgASgLMiAucGdhbWUuR2FtZVN0YXR1c0NoYW5nZWQuRW5kSW5mbxos",
            "CgxTdGFydGluZ0luZm8SHAoUY29ubmVjdGVkX3BsYXllcl9pZHMYASADKA0a",
            "KwoQQ291bnRpbmdEb3duSW5mbxIXCg9jb3VudGRvd25fdmFsdWUYASABKAIa",
            "HQoHRW5kSW5mbxISCgp3aW5uZXJfaWRzGAIgAygNIksKBlN0YXR1cxIJCgVF",
            "cnJvchAAEgwKCFN0YXJ0aW5nEAESEAoMQ291bnRpbmdEb3duEAISCwoHU3Rh",
            "cnRlZBADEgkKBUVuZGVkEAQivAEKB01hcEluZm8SDQoFd2lkdGgYASABKA0S",
            "DgoGaGVpZ2h0GAIgASgNEhAKCG1hcF9kYXRhGAMgASgMEkEKFnBsYXllcl9z",
            "cGF3bl9wb3NpdGlvbnMYBCADKAsyIS5wZ2FtZS5NYXBJbmZvLlBsYXllclRp",
            "bGVQb3NpdGlvbho9ChJQbGF5ZXJUaWxlUG9zaXRpb24SEQoJcGxheWVyX2lk",
            "GAEgASgNEgkKAXgYAiABKA0SCQoBeRgDIAEoDSIQCg5Db25uZWN0aW9uUGlu",
            "ZyJACg5Db25uZWN0aW9uUG9uZxIuCg9wbGF5ZXJfaWRlbnRpdHkYASABKAsy",
            "FS5wZ2FtZS5QbGF5ZXJJZGVudGl0eSKSAQoLUGxheWVySW5wdXQSLgoPcGxh",
            "eWVyX2lkZW50aXR5GAEgASgLMhUucGdhbWUuUGxheWVySWRlbnRpdHkSFAoM",
            "c2VxdWVuY2VfbnVtGAIgASgNEhMKC2RpcmVjdGlvbl94GAMgASgCEhMKC2Rp",
            "cmVjdGlvbl95GAQgASgCEhMKC2JvbWJfcGxhY2VkGAUgASgIIroGCglHYW1l",
            "U3RhdGUSFAoMc2VxdWVuY2VfbnVtGAEgASgNEhIKCmdhbWVfdGltZXIYAiAB",
            "KAISEAoIbWFwX2RhdGEYAyABKAwSMwoNcGxheWVyX3N0YXRlcxgEIAMoCzIc",
            "LnBnYW1lLkdhbWVTdGF0ZS5QbGF5ZXJTdGF0ZRIvCgtib21iX3N0YXRlcxgF",
            "IAMoCzIaLnBnYW1lLkdhbWVTdGF0ZS5Cb21iU3RhdGUSNQoOcG93ZXJ1cF9z",
            "dGF0ZXMYBiADKAsyHS5wZ2FtZS5HYW1lU3RhdGUuUG93ZXJ1cFN0YXRlGr8C",
            "CgtQbGF5ZXJTdGF0ZRIRCglwbGF5ZXJfaWQYASABKA0SRgoQY29ubmVjdGlv",
            "bl9zdGF0ZRgCIAEoDjIsLnBnYW1lLkdhbWVTdGF0ZS5QbGF5ZXJTdGF0ZS5D",
            "b25uZWN0aW9uU3RhdGUSMQoFc3RhdGUYAyABKA4yIi5wZ2FtZS5HYW1lU3Rh",
            "dGUuUGxheWVyU3RhdGUuU3RhdGUSEgoKcG9zaXRpb25feBgEIAEoAhISCgpw",
            "b3NpdGlvbl95GAUgASgCEhMKC2RpcmVjdGlvbl94GAYgASgCEhMKC2RpcmVj",
            "dGlvbl95GAcgASgCIjIKD0Nvbm5lY3Rpb25TdGF0ZRIQCgxESVNDT05ORUNU",
            "RUQQABINCglDT05ORUNURUQQASIcCgVTdGF0ZRIICgRERUFEEAASCQoFQUxJ",
            "VkUQARpOCglCb21iU3RhdGUSCgoCaWQYASABKA0SEgoKcG9zaXRpb25feBgC",
            "IAEoDRISCgpwb3NpdGlvbl95GAMgASgNEg0KBXJhbmdlGAQgASgNGsEBCgxQ",
            "b3dlcnVwU3RhdGUSCgoCaWQYASABKA0SEgoKcG9zaXRpb25feBgCIAEoDRIS",
            "Cgpwb3NpdGlvbl95GAMgASgNEjgKDHBvd2VydXBfdHlwZRgEIAEoDjIiLnBn",
            "YW1lLkdhbWVTdGF0ZS5Qb3dlcnVwU3RhdGUuVHlwZSJDCgRUeXBlEgsKB1VO",
            "S05PV04QABIRCg1CT01CX1FVQU5USVRZEAESDgoKQk9NQl9SQU5HRRACEgsK",
            "B1NQRUVEVVAQA2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Pgame.PlayerIdentity), global::Pgame.PlayerIdentity.Parser, new[]{ "RoomId", "PlayerId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pgame.JoinGameRequest), global::Pgame.JoinGameRequest.Parser, new[]{ "PlayerIdentity" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pgame.JoinGameResponse), global::Pgame.JoinGameResponse.Parser, new[]{ "Success", "MapInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pgame.MapInfoReceived), global::Pgame.MapInfoReceived.Parser, new[]{ "PlayerIdentity" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pgame.GameStatusChanged), global::Pgame.GameStatusChanged.Parser, new[]{ "Status", "StartingInfo", "CountingdownInfo", "EndInfo" }, null, new[]{ typeof(global::Pgame.GameStatusChanged.Types.Status) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pgame.GameStatusChanged.Types.StartingInfo), global::Pgame.GameStatusChanged.Types.StartingInfo.Parser, new[]{ "ConnectedPlayerIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pgame.GameStatusChanged.Types.CountingDownInfo), global::Pgame.GameStatusChanged.Types.CountingDownInfo.Parser, new[]{ "CountdownValue" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pgame.GameStatusChanged.Types.EndInfo), global::Pgame.GameStatusChanged.Types.EndInfo.Parser, new[]{ "WinnerIds" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pgame.MapInfo), global::Pgame.MapInfo.Parser, new[]{ "Width", "Height", "MapData", "PlayerSpawnPositions" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pgame.MapInfo.Types.PlayerTilePosition), global::Pgame.MapInfo.Types.PlayerTilePosition.Parser, new[]{ "PlayerId", "X", "Y" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pgame.ConnectionPing), global::Pgame.ConnectionPing.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pgame.ConnectionPong), global::Pgame.ConnectionPong.Parser, new[]{ "PlayerIdentity" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pgame.PlayerInput), global::Pgame.PlayerInput.Parser, new[]{ "PlayerIdentity", "SequenceNum", "DirectionX", "DirectionY", "BombPlaced" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pgame.GameState), global::Pgame.GameState.Parser, new[]{ "SequenceNum", "GameTimer", "MapData", "PlayerStates", "BombStates", "PowerupStates" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Pgame.GameState.Types.PlayerState), global::Pgame.GameState.Types.PlayerState.Parser, new[]{ "PlayerId", "ConnectionState", "State", "PositionX", "PositionY", "DirectionX", "DirectionY" }, null, new[]{ typeof(global::Pgame.GameState.Types.PlayerState.Types.ConnectionState), typeof(global::Pgame.GameState.Types.PlayerState.Types.State) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pgame.GameState.Types.BombState), global::Pgame.GameState.Types.BombState.Parser, new[]{ "Id", "PositionX", "PositionY", "Range" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pgame.GameState.Types.PowerupState), global::Pgame.GameState.Types.PowerupState.Parser, new[]{ "Id", "PositionX", "PositionY", "PowerupType" }, null, new[]{ typeof(global::Pgame.GameState.Types.PowerupState.Types.Type) }, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PlayerIdentity : pb::IMessage<PlayerIdentity>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayerIdentity> _parser = new pb::MessageParser<PlayerIdentity>(() => new PlayerIdentity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerIdentity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pgame.PgameReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerIdentity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerIdentity(PlayerIdentity other) : this() {
      roomId_ = other.roomId_;
      playerId_ = other.playerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerIdentity Clone() {
      return new PlayerIdentity(this);
    }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private uint roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private uint playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerIdentity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerIdentity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (PlayerId != other.PlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != 0) hash ^= RoomId.GetHashCode();
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RoomId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RoomId);
      }
      if (PlayerId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RoomId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RoomId);
      }
      if (PlayerId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomId);
      }
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerIdentity other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != 0) {
        RoomId = other.RoomId;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomId = input.ReadUInt32();
            break;
          }
          case 16: {
            PlayerId = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RoomId = input.ReadUInt32();
            break;
          }
          case 16: {
            PlayerId = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class JoinGameRequest : pb::IMessage<JoinGameRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<JoinGameRequest> _parser = new pb::MessageParser<JoinGameRequest>(() => new JoinGameRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinGameRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pgame.PgameReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinGameRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinGameRequest(JoinGameRequest other) : this() {
      playerIdentity_ = other.playerIdentity_ != null ? other.playerIdentity_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinGameRequest Clone() {
      return new JoinGameRequest(this);
    }

    /// <summary>Field number for the "player_identity" field.</summary>
    public const int PlayerIdentityFieldNumber = 1;
    private global::Pgame.PlayerIdentity playerIdentity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pgame.PlayerIdentity PlayerIdentity {
      get { return playerIdentity_; }
      set {
        playerIdentity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinGameRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinGameRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerIdentity, other.PlayerIdentity)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerIdentity_ != null) hash ^= PlayerIdentity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (playerIdentity_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerIdentity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (playerIdentity_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerIdentity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerIdentity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerIdentity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinGameRequest other) {
      if (other == null) {
        return;
      }
      if (other.playerIdentity_ != null) {
        if (playerIdentity_ == null) {
          PlayerIdentity = new global::Pgame.PlayerIdentity();
        }
        PlayerIdentity.MergeFrom(other.PlayerIdentity);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (playerIdentity_ == null) {
              PlayerIdentity = new global::Pgame.PlayerIdentity();
            }
            input.ReadMessage(PlayerIdentity);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (playerIdentity_ == null) {
              PlayerIdentity = new global::Pgame.PlayerIdentity();
            }
            input.ReadMessage(PlayerIdentity);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class JoinGameResponse : pb::IMessage<JoinGameResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<JoinGameResponse> _parser = new pb::MessageParser<JoinGameResponse>(() => new JoinGameResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinGameResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pgame.PgameReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinGameResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinGameResponse(JoinGameResponse other) : this() {
      success_ = other.success_;
      mapInfo_ = other.mapInfo_ != null ? other.mapInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinGameResponse Clone() {
      return new JoinGameResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "map_info" field.</summary>
    public const int MapInfoFieldNumber = 2;
    private global::Pgame.MapInfo mapInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pgame.MapInfo MapInfo {
      get { return mapInfo_; }
      set {
        mapInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinGameResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinGameResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (!object.Equals(MapInfo, other.MapInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (mapInfo_ != null) hash ^= MapInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (mapInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MapInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (mapInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MapInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (mapInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MapInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinGameResponse other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.mapInfo_ != null) {
        if (mapInfo_ == null) {
          MapInfo = new global::Pgame.MapInfo();
        }
        MapInfo.MergeFrom(other.MapInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            if (mapInfo_ == null) {
              MapInfo = new global::Pgame.MapInfo();
            }
            input.ReadMessage(MapInfo);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            if (mapInfo_ == null) {
              MapInfo = new global::Pgame.MapInfo();
            }
            input.ReadMessage(MapInfo);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MapInfoReceived : pb::IMessage<MapInfoReceived>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MapInfoReceived> _parser = new pb::MessageParser<MapInfoReceived>(() => new MapInfoReceived());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapInfoReceived> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pgame.PgameReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapInfoReceived() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapInfoReceived(MapInfoReceived other) : this() {
      playerIdentity_ = other.playerIdentity_ != null ? other.playerIdentity_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapInfoReceived Clone() {
      return new MapInfoReceived(this);
    }

    /// <summary>Field number for the "player_identity" field.</summary>
    public const int PlayerIdentityFieldNumber = 1;
    private global::Pgame.PlayerIdentity playerIdentity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pgame.PlayerIdentity PlayerIdentity {
      get { return playerIdentity_; }
      set {
        playerIdentity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapInfoReceived);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapInfoReceived other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerIdentity, other.PlayerIdentity)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerIdentity_ != null) hash ^= PlayerIdentity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (playerIdentity_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerIdentity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (playerIdentity_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerIdentity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerIdentity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerIdentity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapInfoReceived other) {
      if (other == null) {
        return;
      }
      if (other.playerIdentity_ != null) {
        if (playerIdentity_ == null) {
          PlayerIdentity = new global::Pgame.PlayerIdentity();
        }
        PlayerIdentity.MergeFrom(other.PlayerIdentity);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (playerIdentity_ == null) {
              PlayerIdentity = new global::Pgame.PlayerIdentity();
            }
            input.ReadMessage(PlayerIdentity);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (playerIdentity_ == null) {
              PlayerIdentity = new global::Pgame.PlayerIdentity();
            }
            input.ReadMessage(PlayerIdentity);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GameStatusChanged : pb::IMessage<GameStatusChanged>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameStatusChanged> _parser = new pb::MessageParser<GameStatusChanged>(() => new GameStatusChanged());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameStatusChanged> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pgame.PgameReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStatusChanged() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStatusChanged(GameStatusChanged other) : this() {
      status_ = other.status_;
      startingInfo_ = other.startingInfo_ != null ? other.startingInfo_.Clone() : null;
      countingdownInfo_ = other.countingdownInfo_ != null ? other.countingdownInfo_.Clone() : null;
      endInfo_ = other.endInfo_ != null ? other.endInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStatusChanged Clone() {
      return new GameStatusChanged(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Pgame.GameStatusChanged.Types.Status status_ = global::Pgame.GameStatusChanged.Types.Status.Error;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pgame.GameStatusChanged.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "starting_info" field.</summary>
    public const int StartingInfoFieldNumber = 2;
    private global::Pgame.GameStatusChanged.Types.StartingInfo startingInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pgame.GameStatusChanged.Types.StartingInfo StartingInfo {
      get { return startingInfo_; }
      set {
        startingInfo_ = value;
      }
    }

    /// <summary>Field number for the "countingdown_info" field.</summary>
    public const int CountingdownInfoFieldNumber = 3;
    private global::Pgame.GameStatusChanged.Types.CountingDownInfo countingdownInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pgame.GameStatusChanged.Types.CountingDownInfo CountingdownInfo {
      get { return countingdownInfo_; }
      set {
        countingdownInfo_ = value;
      }
    }

    /// <summary>Field number for the "end_info" field.</summary>
    public const int EndInfoFieldNumber = 4;
    private global::Pgame.GameStatusChanged.Types.EndInfo endInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pgame.GameStatusChanged.Types.EndInfo EndInfo {
      get { return endInfo_; }
      set {
        endInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameStatusChanged);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameStatusChanged other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(StartingInfo, other.StartingInfo)) return false;
      if (!object.Equals(CountingdownInfo, other.CountingdownInfo)) return false;
      if (!object.Equals(EndInfo, other.EndInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != global::Pgame.GameStatusChanged.Types.Status.Error) hash ^= Status.GetHashCode();
      if (startingInfo_ != null) hash ^= StartingInfo.GetHashCode();
      if (countingdownInfo_ != null) hash ^= CountingdownInfo.GetHashCode();
      if (endInfo_ != null) hash ^= EndInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Status != global::Pgame.GameStatusChanged.Types.Status.Error) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (startingInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(StartingInfo);
      }
      if (countingdownInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CountingdownInfo);
      }
      if (endInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(EndInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Status != global::Pgame.GameStatusChanged.Types.Status.Error) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (startingInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(StartingInfo);
      }
      if (countingdownInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CountingdownInfo);
      }
      if (endInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(EndInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != global::Pgame.GameStatusChanged.Types.Status.Error) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (startingInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartingInfo);
      }
      if (countingdownInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CountingdownInfo);
      }
      if (endInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameStatusChanged other) {
      if (other == null) {
        return;
      }
      if (other.Status != global::Pgame.GameStatusChanged.Types.Status.Error) {
        Status = other.Status;
      }
      if (other.startingInfo_ != null) {
        if (startingInfo_ == null) {
          StartingInfo = new global::Pgame.GameStatusChanged.Types.StartingInfo();
        }
        StartingInfo.MergeFrom(other.StartingInfo);
      }
      if (other.countingdownInfo_ != null) {
        if (countingdownInfo_ == null) {
          CountingdownInfo = new global::Pgame.GameStatusChanged.Types.CountingDownInfo();
        }
        CountingdownInfo.MergeFrom(other.CountingdownInfo);
      }
      if (other.endInfo_ != null) {
        if (endInfo_ == null) {
          EndInfo = new global::Pgame.GameStatusChanged.Types.EndInfo();
        }
        EndInfo.MergeFrom(other.EndInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = (global::Pgame.GameStatusChanged.Types.Status) input.ReadEnum();
            break;
          }
          case 18: {
            if (startingInfo_ == null) {
              StartingInfo = new global::Pgame.GameStatusChanged.Types.StartingInfo();
            }
            input.ReadMessage(StartingInfo);
            break;
          }
          case 26: {
            if (countingdownInfo_ == null) {
              CountingdownInfo = new global::Pgame.GameStatusChanged.Types.CountingDownInfo();
            }
            input.ReadMessage(CountingdownInfo);
            break;
          }
          case 34: {
            if (endInfo_ == null) {
              EndInfo = new global::Pgame.GameStatusChanged.Types.EndInfo();
            }
            input.ReadMessage(EndInfo);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Status = (global::Pgame.GameStatusChanged.Types.Status) input.ReadEnum();
            break;
          }
          case 18: {
            if (startingInfo_ == null) {
              StartingInfo = new global::Pgame.GameStatusChanged.Types.StartingInfo();
            }
            input.ReadMessage(StartingInfo);
            break;
          }
          case 26: {
            if (countingdownInfo_ == null) {
              CountingdownInfo = new global::Pgame.GameStatusChanged.Types.CountingDownInfo();
            }
            input.ReadMessage(CountingdownInfo);
            break;
          }
          case 34: {
            if (endInfo_ == null) {
              EndInfo = new global::Pgame.GameStatusChanged.Types.EndInfo();
            }
            input.ReadMessage(EndInfo);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the GameStatusChanged message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        [pbr::OriginalName("Error")] Error = 0,
        [pbr::OriginalName("Starting")] Starting = 1,
        [pbr::OriginalName("CountingDown")] CountingDown = 2,
        [pbr::OriginalName("Started")] Started = 3,
        [pbr::OriginalName("Ended")] Ended = 4,
      }

      public sealed partial class StartingInfo : pb::IMessage<StartingInfo>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<StartingInfo> _parser = new pb::MessageParser<StartingInfo>(() => new StartingInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<StartingInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pgame.GameStatusChanged.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StartingInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StartingInfo(StartingInfo other) : this() {
          connectedPlayerIds_ = other.connectedPlayerIds_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StartingInfo Clone() {
          return new StartingInfo(this);
        }

        /// <summary>Field number for the "connected_player_ids" field.</summary>
        public const int ConnectedPlayerIdsFieldNumber = 1;
        private static readonly pb::FieldCodec<uint> _repeated_connectedPlayerIds_codec
            = pb::FieldCodec.ForUInt32(10);
        private readonly pbc::RepeatedField<uint> connectedPlayerIds_ = new pbc::RepeatedField<uint>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> ConnectedPlayerIds {
          get { return connectedPlayerIds_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as StartingInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(StartingInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!connectedPlayerIds_.Equals(other.connectedPlayerIds_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= connectedPlayerIds_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          connectedPlayerIds_.WriteTo(output, _repeated_connectedPlayerIds_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          connectedPlayerIds_.WriteTo(ref output, _repeated_connectedPlayerIds_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += connectedPlayerIds_.CalculateSize(_repeated_connectedPlayerIds_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(StartingInfo other) {
          if (other == null) {
            return;
          }
          connectedPlayerIds_.Add(other.connectedPlayerIds_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10:
              case 8: {
                connectedPlayerIds_.AddEntriesFrom(input, _repeated_connectedPlayerIds_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10:
              case 8: {
                connectedPlayerIds_.AddEntriesFrom(ref input, _repeated_connectedPlayerIds_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class CountingDownInfo : pb::IMessage<CountingDownInfo>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<CountingDownInfo> _parser = new pb::MessageParser<CountingDownInfo>(() => new CountingDownInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CountingDownInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pgame.GameStatusChanged.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CountingDownInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CountingDownInfo(CountingDownInfo other) : this() {
          countdownValue_ = other.countdownValue_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CountingDownInfo Clone() {
          return new CountingDownInfo(this);
        }

        /// <summary>Field number for the "countdown_value" field.</summary>
        public const int CountdownValueFieldNumber = 1;
        private float countdownValue_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float CountdownValue {
          get { return countdownValue_; }
          set {
            countdownValue_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CountingDownInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CountingDownInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CountdownValue, other.CountdownValue)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CountdownValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CountdownValue);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (CountdownValue != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(CountdownValue);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (CountdownValue != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(CountdownValue);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CountdownValue != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CountingDownInfo other) {
          if (other == null) {
            return;
          }
          if (other.CountdownValue != 0F) {
            CountdownValue = other.CountdownValue;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                CountdownValue = input.ReadFloat();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 13: {
                CountdownValue = input.ReadFloat();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// enum EndKind {
      ///     Timeout = 0;
      ///     Winner = 1;
      /// }
      /// </summary>
      public sealed partial class EndInfo : pb::IMessage<EndInfo>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<EndInfo> _parser = new pb::MessageParser<EndInfo>(() => new EndInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EndInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pgame.GameStatusChanged.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EndInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EndInfo(EndInfo other) : this() {
          winnerIds_ = other.winnerIds_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EndInfo Clone() {
          return new EndInfo(this);
        }

        /// <summary>Field number for the "winner_ids" field.</summary>
        public const int WinnerIdsFieldNumber = 2;
        private static readonly pb::FieldCodec<uint> _repeated_winnerIds_codec
            = pb::FieldCodec.ForUInt32(18);
        private readonly pbc::RepeatedField<uint> winnerIds_ = new pbc::RepeatedField<uint>();
        /// <summary>
        /// EndKind end_kind = 1;
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> WinnerIds {
          get { return winnerIds_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as EndInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EndInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!winnerIds_.Equals(other.winnerIds_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= winnerIds_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          winnerIds_.WriteTo(output, _repeated_winnerIds_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          winnerIds_.WriteTo(ref output, _repeated_winnerIds_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += winnerIds_.CalculateSize(_repeated_winnerIds_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EndInfo other) {
          if (other == null) {
            return;
          }
          winnerIds_.Add(other.winnerIds_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 18:
              case 16: {
                winnerIds_.AddEntriesFrom(input, _repeated_winnerIds_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 18:
              case 16: {
                winnerIds_.AddEntriesFrom(ref input, _repeated_winnerIds_codec);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class MapInfo : pb::IMessage<MapInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MapInfo> _parser = new pb::MessageParser<MapInfo>(() => new MapInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pgame.PgameReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapInfo(MapInfo other) : this() {
      width_ = other.width_;
      height_ = other.height_;
      mapData_ = other.mapData_;
      playerSpawnPositions_ = other.playerSpawnPositions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapInfo Clone() {
      return new MapInfo(this);
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 1;
    private uint width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private uint height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "map_data" field.</summary>
    public const int MapDataFieldNumber = 3;
    private pb::ByteString mapData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MapData {
      get { return mapData_; }
      set {
        mapData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_spawn_positions" field.</summary>
    public const int PlayerSpawnPositionsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Pgame.MapInfo.Types.PlayerTilePosition> _repeated_playerSpawnPositions_codec
        = pb::FieldCodec.ForMessage(34, global::Pgame.MapInfo.Types.PlayerTilePosition.Parser);
    private readonly pbc::RepeatedField<global::Pgame.MapInfo.Types.PlayerTilePosition> playerSpawnPositions_ = new pbc::RepeatedField<global::Pgame.MapInfo.Types.PlayerTilePosition>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pgame.MapInfo.Types.PlayerTilePosition> PlayerSpawnPositions {
      get { return playerSpawnPositions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (MapData != other.MapData) return false;
      if(!playerSpawnPositions_.Equals(other.playerSpawnPositions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (MapData.Length != 0) hash ^= MapData.GetHashCode();
      hash ^= playerSpawnPositions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Width != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Height);
      }
      if (MapData.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(MapData);
      }
      playerSpawnPositions_.WriteTo(output, _repeated_playerSpawnPositions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Width != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Height);
      }
      if (MapData.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(MapData);
      }
      playerSpawnPositions_.WriteTo(ref output, _repeated_playerSpawnPositions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
      }
      if (MapData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MapData);
      }
      size += playerSpawnPositions_.CalculateSize(_repeated_playerSpawnPositions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapInfo other) {
      if (other == null) {
        return;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.MapData.Length != 0) {
        MapData = other.MapData;
      }
      playerSpawnPositions_.Add(other.playerSpawnPositions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Width = input.ReadUInt32();
            break;
          }
          case 16: {
            Height = input.ReadUInt32();
            break;
          }
          case 26: {
            MapData = input.ReadBytes();
            break;
          }
          case 34: {
            playerSpawnPositions_.AddEntriesFrom(input, _repeated_playerSpawnPositions_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Width = input.ReadUInt32();
            break;
          }
          case 16: {
            Height = input.ReadUInt32();
            break;
          }
          case 26: {
            MapData = input.ReadBytes();
            break;
          }
          case 34: {
            playerSpawnPositions_.AddEntriesFrom(ref input, _repeated_playerSpawnPositions_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the MapInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class PlayerTilePosition : pb::IMessage<PlayerTilePosition>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PlayerTilePosition> _parser = new pb::MessageParser<PlayerTilePosition>(() => new PlayerTilePosition());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerTilePosition> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pgame.MapInfo.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerTilePosition() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerTilePosition(PlayerTilePosition other) : this() {
          playerId_ = other.playerId_;
          x_ = other.x_;
          y_ = other.y_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerTilePosition Clone() {
          return new PlayerTilePosition(this);
        }

        /// <summary>Field number for the "player_id" field.</summary>
        public const int PlayerIdFieldNumber = 1;
        private uint playerId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PlayerId {
          get { return playerId_; }
          set {
            playerId_ = value;
          }
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 2;
        private uint x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint X {
          get { return x_; }
          set {
            x_ = value;
          }
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 3;
        private uint y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Y {
          get { return y_; }
          set {
            y_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PlayerTilePosition);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerTilePosition other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PlayerId != other.PlayerId) return false;
          if (X != other.X) return false;
          if (Y != other.Y) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
          if (X != 0) hash ^= X.GetHashCode();
          if (Y != 0) hash ^= Y.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (PlayerId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(PlayerId);
          }
          if (X != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(X);
          }
          if (Y != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Y);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (PlayerId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(PlayerId);
          }
          if (X != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(X);
          }
          if (Y != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(Y);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PlayerId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
          }
          if (X != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(X);
          }
          if (Y != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Y);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerTilePosition other) {
          if (other == null) {
            return;
          }
          if (other.PlayerId != 0) {
            PlayerId = other.PlayerId;
          }
          if (other.X != 0) {
            X = other.X;
          }
          if (other.Y != 0) {
            Y = other.Y;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                PlayerId = input.ReadUInt32();
                break;
              }
              case 16: {
                X = input.ReadUInt32();
                break;
              }
              case 24: {
                Y = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                PlayerId = input.ReadUInt32();
                break;
              }
              case 16: {
                X = input.ReadUInt32();
                break;
              }
              case 24: {
                Y = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class ConnectionPing : pb::IMessage<ConnectionPing>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ConnectionPing> _parser = new pb::MessageParser<ConnectionPing>(() => new ConnectionPing());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectionPing> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pgame.PgameReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionPing() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionPing(ConnectionPing other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionPing Clone() {
      return new ConnectionPing(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectionPing);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectionPing other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectionPing other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class ConnectionPong : pb::IMessage<ConnectionPong>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ConnectionPong> _parser = new pb::MessageParser<ConnectionPong>(() => new ConnectionPong());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectionPong> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pgame.PgameReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionPong() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionPong(ConnectionPong other) : this() {
      playerIdentity_ = other.playerIdentity_ != null ? other.playerIdentity_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionPong Clone() {
      return new ConnectionPong(this);
    }

    /// <summary>Field number for the "player_identity" field.</summary>
    public const int PlayerIdentityFieldNumber = 1;
    private global::Pgame.PlayerIdentity playerIdentity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pgame.PlayerIdentity PlayerIdentity {
      get { return playerIdentity_; }
      set {
        playerIdentity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectionPong);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectionPong other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerIdentity, other.PlayerIdentity)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerIdentity_ != null) hash ^= PlayerIdentity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (playerIdentity_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerIdentity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (playerIdentity_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerIdentity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerIdentity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerIdentity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectionPong other) {
      if (other == null) {
        return;
      }
      if (other.playerIdentity_ != null) {
        if (playerIdentity_ == null) {
          PlayerIdentity = new global::Pgame.PlayerIdentity();
        }
        PlayerIdentity.MergeFrom(other.PlayerIdentity);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (playerIdentity_ == null) {
              PlayerIdentity = new global::Pgame.PlayerIdentity();
            }
            input.ReadMessage(PlayerIdentity);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (playerIdentity_ == null) {
              PlayerIdentity = new global::Pgame.PlayerIdentity();
            }
            input.ReadMessage(PlayerIdentity);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PlayerInput : pb::IMessage<PlayerInput>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayerInput> _parser = new pb::MessageParser<PlayerInput>(() => new PlayerInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pgame.PgameReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInput(PlayerInput other) : this() {
      playerIdentity_ = other.playerIdentity_ != null ? other.playerIdentity_.Clone() : null;
      sequenceNum_ = other.sequenceNum_;
      directionX_ = other.directionX_;
      directionY_ = other.directionY_;
      bombPlaced_ = other.bombPlaced_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInput Clone() {
      return new PlayerInput(this);
    }

    /// <summary>Field number for the "player_identity" field.</summary>
    public const int PlayerIdentityFieldNumber = 1;
    private global::Pgame.PlayerIdentity playerIdentity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pgame.PlayerIdentity PlayerIdentity {
      get { return playerIdentity_; }
      set {
        playerIdentity_ = value;
      }
    }

    /// <summary>Field number for the "sequence_num" field.</summary>
    public const int SequenceNumFieldNumber = 2;
    private uint sequenceNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SequenceNum {
      get { return sequenceNum_; }
      set {
        sequenceNum_ = value;
      }
    }

    /// <summary>Field number for the "direction_x" field.</summary>
    public const int DirectionXFieldNumber = 3;
    private float directionX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DirectionX {
      get { return directionX_; }
      set {
        directionX_ = value;
      }
    }

    /// <summary>Field number for the "direction_y" field.</summary>
    public const int DirectionYFieldNumber = 4;
    private float directionY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DirectionY {
      get { return directionY_; }
      set {
        directionY_ = value;
      }
    }

    /// <summary>Field number for the "bomb_placed" field.</summary>
    public const int BombPlacedFieldNumber = 5;
    private bool bombPlaced_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BombPlaced {
      get { return bombPlaced_; }
      set {
        bombPlaced_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerIdentity, other.PlayerIdentity)) return false;
      if (SequenceNum != other.SequenceNum) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DirectionX, other.DirectionX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DirectionY, other.DirectionY)) return false;
      if (BombPlaced != other.BombPlaced) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerIdentity_ != null) hash ^= PlayerIdentity.GetHashCode();
      if (SequenceNum != 0) hash ^= SequenceNum.GetHashCode();
      if (DirectionX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DirectionX);
      if (DirectionY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DirectionY);
      if (BombPlaced != false) hash ^= BombPlaced.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (playerIdentity_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerIdentity);
      }
      if (SequenceNum != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SequenceNum);
      }
      if (DirectionX != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(DirectionX);
      }
      if (DirectionY != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(DirectionY);
      }
      if (BombPlaced != false) {
        output.WriteRawTag(40);
        output.WriteBool(BombPlaced);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (playerIdentity_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerIdentity);
      }
      if (SequenceNum != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SequenceNum);
      }
      if (DirectionX != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(DirectionX);
      }
      if (DirectionY != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(DirectionY);
      }
      if (BombPlaced != false) {
        output.WriteRawTag(40);
        output.WriteBool(BombPlaced);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerIdentity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerIdentity);
      }
      if (SequenceNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SequenceNum);
      }
      if (DirectionX != 0F) {
        size += 1 + 4;
      }
      if (DirectionY != 0F) {
        size += 1 + 4;
      }
      if (BombPlaced != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInput other) {
      if (other == null) {
        return;
      }
      if (other.playerIdentity_ != null) {
        if (playerIdentity_ == null) {
          PlayerIdentity = new global::Pgame.PlayerIdentity();
        }
        PlayerIdentity.MergeFrom(other.PlayerIdentity);
      }
      if (other.SequenceNum != 0) {
        SequenceNum = other.SequenceNum;
      }
      if (other.DirectionX != 0F) {
        DirectionX = other.DirectionX;
      }
      if (other.DirectionY != 0F) {
        DirectionY = other.DirectionY;
      }
      if (other.BombPlaced != false) {
        BombPlaced = other.BombPlaced;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (playerIdentity_ == null) {
              PlayerIdentity = new global::Pgame.PlayerIdentity();
            }
            input.ReadMessage(PlayerIdentity);
            break;
          }
          case 16: {
            SequenceNum = input.ReadUInt32();
            break;
          }
          case 29: {
            DirectionX = input.ReadFloat();
            break;
          }
          case 37: {
            DirectionY = input.ReadFloat();
            break;
          }
          case 40: {
            BombPlaced = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (playerIdentity_ == null) {
              PlayerIdentity = new global::Pgame.PlayerIdentity();
            }
            input.ReadMessage(PlayerIdentity);
            break;
          }
          case 16: {
            SequenceNum = input.ReadUInt32();
            break;
          }
          case 29: {
            DirectionX = input.ReadFloat();
            break;
          }
          case 37: {
            DirectionY = input.ReadFloat();
            break;
          }
          case 40: {
            BombPlaced = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GameState : pb::IMessage<GameState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameState> _parser = new pb::MessageParser<GameState>(() => new GameState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pgame.PgameReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState(GameState other) : this() {
      sequenceNum_ = other.sequenceNum_;
      gameTimer_ = other.gameTimer_;
      mapData_ = other.mapData_;
      playerStates_ = other.playerStates_.Clone();
      bombStates_ = other.bombStates_.Clone();
      powerupStates_ = other.powerupStates_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState Clone() {
      return new GameState(this);
    }

    /// <summary>Field number for the "sequence_num" field.</summary>
    public const int SequenceNumFieldNumber = 1;
    private uint sequenceNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SequenceNum {
      get { return sequenceNum_; }
      set {
        sequenceNum_ = value;
      }
    }

    /// <summary>Field number for the "game_timer" field.</summary>
    public const int GameTimerFieldNumber = 2;
    private float gameTimer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GameTimer {
      get { return gameTimer_; }
      set {
        gameTimer_ = value;
      }
    }

    /// <summary>Field number for the "map_data" field.</summary>
    public const int MapDataFieldNumber = 3;
    private pb::ByteString mapData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MapData {
      get { return mapData_; }
      set {
        mapData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player_states" field.</summary>
    public const int PlayerStatesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Pgame.GameState.Types.PlayerState> _repeated_playerStates_codec
        = pb::FieldCodec.ForMessage(34, global::Pgame.GameState.Types.PlayerState.Parser);
    private readonly pbc::RepeatedField<global::Pgame.GameState.Types.PlayerState> playerStates_ = new pbc::RepeatedField<global::Pgame.GameState.Types.PlayerState>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pgame.GameState.Types.PlayerState> PlayerStates {
      get { return playerStates_; }
    }

    /// <summary>Field number for the "bomb_states" field.</summary>
    public const int BombStatesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Pgame.GameState.Types.BombState> _repeated_bombStates_codec
        = pb::FieldCodec.ForMessage(42, global::Pgame.GameState.Types.BombState.Parser);
    private readonly pbc::RepeatedField<global::Pgame.GameState.Types.BombState> bombStates_ = new pbc::RepeatedField<global::Pgame.GameState.Types.BombState>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pgame.GameState.Types.BombState> BombStates {
      get { return bombStates_; }
    }

    /// <summary>Field number for the "powerup_states" field.</summary>
    public const int PowerupStatesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Pgame.GameState.Types.PowerupState> _repeated_powerupStates_codec
        = pb::FieldCodec.ForMessage(50, global::Pgame.GameState.Types.PowerupState.Parser);
    private readonly pbc::RepeatedField<global::Pgame.GameState.Types.PowerupState> powerupStates_ = new pbc::RepeatedField<global::Pgame.GameState.Types.PowerupState>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pgame.GameState.Types.PowerupState> PowerupStates {
      get { return powerupStates_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SequenceNum != other.SequenceNum) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GameTimer, other.GameTimer)) return false;
      if (MapData != other.MapData) return false;
      if(!playerStates_.Equals(other.playerStates_)) return false;
      if(!bombStates_.Equals(other.bombStates_)) return false;
      if(!powerupStates_.Equals(other.powerupStates_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SequenceNum != 0) hash ^= SequenceNum.GetHashCode();
      if (GameTimer != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GameTimer);
      if (MapData.Length != 0) hash ^= MapData.GetHashCode();
      hash ^= playerStates_.GetHashCode();
      hash ^= bombStates_.GetHashCode();
      hash ^= powerupStates_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SequenceNum != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SequenceNum);
      }
      if (GameTimer != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(GameTimer);
      }
      if (MapData.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(MapData);
      }
      playerStates_.WriteTo(output, _repeated_playerStates_codec);
      bombStates_.WriteTo(output, _repeated_bombStates_codec);
      powerupStates_.WriteTo(output, _repeated_powerupStates_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SequenceNum != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SequenceNum);
      }
      if (GameTimer != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(GameTimer);
      }
      if (MapData.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(MapData);
      }
      playerStates_.WriteTo(ref output, _repeated_playerStates_codec);
      bombStates_.WriteTo(ref output, _repeated_bombStates_codec);
      powerupStates_.WriteTo(ref output, _repeated_powerupStates_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SequenceNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SequenceNum);
      }
      if (GameTimer != 0F) {
        size += 1 + 4;
      }
      if (MapData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MapData);
      }
      size += playerStates_.CalculateSize(_repeated_playerStates_codec);
      size += bombStates_.CalculateSize(_repeated_bombStates_codec);
      size += powerupStates_.CalculateSize(_repeated_powerupStates_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameState other) {
      if (other == null) {
        return;
      }
      if (other.SequenceNum != 0) {
        SequenceNum = other.SequenceNum;
      }
      if (other.GameTimer != 0F) {
        GameTimer = other.GameTimer;
      }
      if (other.MapData.Length != 0) {
        MapData = other.MapData;
      }
      playerStates_.Add(other.playerStates_);
      bombStates_.Add(other.bombStates_);
      powerupStates_.Add(other.powerupStates_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SequenceNum = input.ReadUInt32();
            break;
          }
          case 21: {
            GameTimer = input.ReadFloat();
            break;
          }
          case 26: {
            MapData = input.ReadBytes();
            break;
          }
          case 34: {
            playerStates_.AddEntriesFrom(input, _repeated_playerStates_codec);
            break;
          }
          case 42: {
            bombStates_.AddEntriesFrom(input, _repeated_bombStates_codec);
            break;
          }
          case 50: {
            powerupStates_.AddEntriesFrom(input, _repeated_powerupStates_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SequenceNum = input.ReadUInt32();
            break;
          }
          case 21: {
            GameTimer = input.ReadFloat();
            break;
          }
          case 26: {
            MapData = input.ReadBytes();
            break;
          }
          case 34: {
            playerStates_.AddEntriesFrom(ref input, _repeated_playerStates_codec);
            break;
          }
          case 42: {
            bombStates_.AddEntriesFrom(ref input, _repeated_bombStates_codec);
            break;
          }
          case 50: {
            powerupStates_.AddEntriesFrom(ref input, _repeated_powerupStates_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the GameState message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class PlayerState : pb::IMessage<PlayerState>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PlayerState> _parser = new pb::MessageParser<PlayerState>(() => new PlayerState());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlayerState> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pgame.GameState.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerState() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerState(PlayerState other) : this() {
          playerId_ = other.playerId_;
          connectionState_ = other.connectionState_;
          state_ = other.state_;
          positionX_ = other.positionX_;
          positionY_ = other.positionY_;
          directionX_ = other.directionX_;
          directionY_ = other.directionY_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlayerState Clone() {
          return new PlayerState(this);
        }

        /// <summary>Field number for the "player_id" field.</summary>
        public const int PlayerIdFieldNumber = 1;
        private uint playerId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PlayerId {
          get { return playerId_; }
          set {
            playerId_ = value;
          }
        }

        /// <summary>Field number for the "connection_state" field.</summary>
        public const int ConnectionStateFieldNumber = 2;
        private global::Pgame.GameState.Types.PlayerState.Types.ConnectionState connectionState_ = global::Pgame.GameState.Types.PlayerState.Types.ConnectionState.Disconnected;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pgame.GameState.Types.PlayerState.Types.ConnectionState ConnectionState {
          get { return connectionState_; }
          set {
            connectionState_ = value;
          }
        }

        /// <summary>Field number for the "state" field.</summary>
        public const int StateFieldNumber = 3;
        private global::Pgame.GameState.Types.PlayerState.Types.State state_ = global::Pgame.GameState.Types.PlayerState.Types.State.Dead;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pgame.GameState.Types.PlayerState.Types.State State {
          get { return state_; }
          set {
            state_ = value;
          }
        }

        /// <summary>Field number for the "position_x" field.</summary>
        public const int PositionXFieldNumber = 4;
        private float positionX_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float PositionX {
          get { return positionX_; }
          set {
            positionX_ = value;
          }
        }

        /// <summary>Field number for the "position_y" field.</summary>
        public const int PositionYFieldNumber = 5;
        private float positionY_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float PositionY {
          get { return positionY_; }
          set {
            positionY_ = value;
          }
        }

        /// <summary>Field number for the "direction_x" field.</summary>
        public const int DirectionXFieldNumber = 6;
        private float directionX_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float DirectionX {
          get { return directionX_; }
          set {
            directionX_ = value;
          }
        }

        /// <summary>Field number for the "direction_y" field.</summary>
        public const int DirectionYFieldNumber = 7;
        private float directionY_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float DirectionY {
          get { return directionY_; }
          set {
            directionY_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PlayerState);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlayerState other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PlayerId != other.PlayerId) return false;
          if (ConnectionState != other.ConnectionState) return false;
          if (State != other.State) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionX, other.PositionX)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionY, other.PositionY)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DirectionX, other.DirectionX)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DirectionY, other.DirectionY)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
          if (ConnectionState != global::Pgame.GameState.Types.PlayerState.Types.ConnectionState.Disconnected) hash ^= ConnectionState.GetHashCode();
          if (State != global::Pgame.GameState.Types.PlayerState.Types.State.Dead) hash ^= State.GetHashCode();
          if (PositionX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionX);
          if (PositionY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionY);
          if (DirectionX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DirectionX);
          if (DirectionY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DirectionY);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (PlayerId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(PlayerId);
          }
          if (ConnectionState != global::Pgame.GameState.Types.PlayerState.Types.ConnectionState.Disconnected) {
            output.WriteRawTag(16);
            output.WriteEnum((int) ConnectionState);
          }
          if (State != global::Pgame.GameState.Types.PlayerState.Types.State.Dead) {
            output.WriteRawTag(24);
            output.WriteEnum((int) State);
          }
          if (PositionX != 0F) {
            output.WriteRawTag(37);
            output.WriteFloat(PositionX);
          }
          if (PositionY != 0F) {
            output.WriteRawTag(45);
            output.WriteFloat(PositionY);
          }
          if (DirectionX != 0F) {
            output.WriteRawTag(53);
            output.WriteFloat(DirectionX);
          }
          if (DirectionY != 0F) {
            output.WriteRawTag(61);
            output.WriteFloat(DirectionY);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (PlayerId != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(PlayerId);
          }
          if (ConnectionState != global::Pgame.GameState.Types.PlayerState.Types.ConnectionState.Disconnected) {
            output.WriteRawTag(16);
            output.WriteEnum((int) ConnectionState);
          }
          if (State != global::Pgame.GameState.Types.PlayerState.Types.State.Dead) {
            output.WriteRawTag(24);
            output.WriteEnum((int) State);
          }
          if (PositionX != 0F) {
            output.WriteRawTag(37);
            output.WriteFloat(PositionX);
          }
          if (PositionY != 0F) {
            output.WriteRawTag(45);
            output.WriteFloat(PositionY);
          }
          if (DirectionX != 0F) {
            output.WriteRawTag(53);
            output.WriteFloat(DirectionX);
          }
          if (DirectionY != 0F) {
            output.WriteRawTag(61);
            output.WriteFloat(DirectionY);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PlayerId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerId);
          }
          if (ConnectionState != global::Pgame.GameState.Types.PlayerState.Types.ConnectionState.Disconnected) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ConnectionState);
          }
          if (State != global::Pgame.GameState.Types.PlayerState.Types.State.Dead) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
          }
          if (PositionX != 0F) {
            size += 1 + 4;
          }
          if (PositionY != 0F) {
            size += 1 + 4;
          }
          if (DirectionX != 0F) {
            size += 1 + 4;
          }
          if (DirectionY != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlayerState other) {
          if (other == null) {
            return;
          }
          if (other.PlayerId != 0) {
            PlayerId = other.PlayerId;
          }
          if (other.ConnectionState != global::Pgame.GameState.Types.PlayerState.Types.ConnectionState.Disconnected) {
            ConnectionState = other.ConnectionState;
          }
          if (other.State != global::Pgame.GameState.Types.PlayerState.Types.State.Dead) {
            State = other.State;
          }
          if (other.PositionX != 0F) {
            PositionX = other.PositionX;
          }
          if (other.PositionY != 0F) {
            PositionY = other.PositionY;
          }
          if (other.DirectionX != 0F) {
            DirectionX = other.DirectionX;
          }
          if (other.DirectionY != 0F) {
            DirectionY = other.DirectionY;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                PlayerId = input.ReadUInt32();
                break;
              }
              case 16: {
                ConnectionState = (global::Pgame.GameState.Types.PlayerState.Types.ConnectionState) input.ReadEnum();
                break;
              }
              case 24: {
                State = (global::Pgame.GameState.Types.PlayerState.Types.State) input.ReadEnum();
                break;
              }
              case 37: {
                PositionX = input.ReadFloat();
                break;
              }
              case 45: {
                PositionY = input.ReadFloat();
                break;
              }
              case 53: {
                DirectionX = input.ReadFloat();
                break;
              }
              case 61: {
                DirectionY = input.ReadFloat();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                PlayerId = input.ReadUInt32();
                break;
              }
              case 16: {
                ConnectionState = (global::Pgame.GameState.Types.PlayerState.Types.ConnectionState) input.ReadEnum();
                break;
              }
              case 24: {
                State = (global::Pgame.GameState.Types.PlayerState.Types.State) input.ReadEnum();
                break;
              }
              case 37: {
                PositionX = input.ReadFloat();
                break;
              }
              case 45: {
                PositionY = input.ReadFloat();
                break;
              }
              case 53: {
                DirectionX = input.ReadFloat();
                break;
              }
              case 61: {
                DirectionY = input.ReadFloat();
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the PlayerState message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum ConnectionState {
            [pbr::OriginalName("DISCONNECTED")] Disconnected = 0,
            [pbr::OriginalName("CONNECTED")] Connected = 1,
          }

          public enum State {
            [pbr::OriginalName("DEAD")] Dead = 0,
            [pbr::OriginalName("ALIVE")] Alive = 1,
          }

        }
        #endregion

      }

      public sealed partial class BombState : pb::IMessage<BombState>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<BombState> _parser = new pb::MessageParser<BombState>(() => new BombState());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BombState> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pgame.GameState.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BombState() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BombState(BombState other) : this() {
          id_ = other.id_;
          positionX_ = other.positionX_;
          positionY_ = other.positionY_;
          range_ = other.range_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BombState Clone() {
          return new BombState(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private uint id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "position_x" field.</summary>
        public const int PositionXFieldNumber = 2;
        private uint positionX_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PositionX {
          get { return positionX_; }
          set {
            positionX_ = value;
          }
        }

        /// <summary>Field number for the "position_y" field.</summary>
        public const int PositionYFieldNumber = 3;
        private uint positionY_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PositionY {
          get { return positionY_; }
          set {
            positionY_ = value;
          }
        }

        /// <summary>Field number for the "range" field.</summary>
        public const int RangeFieldNumber = 4;
        private uint range_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Range {
          get { return range_; }
          set {
            range_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BombState);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BombState other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (PositionX != other.PositionX) return false;
          if (PositionY != other.PositionY) return false;
          if (Range != other.Range) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0) hash ^= Id.GetHashCode();
          if (PositionX != 0) hash ^= PositionX.GetHashCode();
          if (PositionY != 0) hash ^= PositionY.GetHashCode();
          if (Range != 0) hash ^= Range.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
          if (PositionX != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(PositionX);
          }
          if (PositionY != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(PositionY);
          }
          if (Range != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(Range);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
          if (PositionX != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(PositionX);
          }
          if (PositionY != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(PositionY);
          }
          if (Range != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(Range);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          if (PositionX != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PositionX);
          }
          if (PositionY != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PositionY);
          }
          if (Range != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Range);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BombState other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0) {
            Id = other.Id;
          }
          if (other.PositionX != 0) {
            PositionX = other.PositionX;
          }
          if (other.PositionY != 0) {
            PositionY = other.PositionY;
          }
          if (other.Range != 0) {
            Range = other.Range;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
              case 16: {
                PositionX = input.ReadUInt32();
                break;
              }
              case 24: {
                PositionY = input.ReadUInt32();
                break;
              }
              case 32: {
                Range = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
              case 16: {
                PositionX = input.ReadUInt32();
                break;
              }
              case 24: {
                PositionY = input.ReadUInt32();
                break;
              }
              case 32: {
                Range = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class PowerupState : pb::IMessage<PowerupState>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PowerupState> _parser = new pb::MessageParser<PowerupState>(() => new PowerupState());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PowerupState> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Pgame.GameState.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PowerupState() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PowerupState(PowerupState other) : this() {
          id_ = other.id_;
          positionX_ = other.positionX_;
          positionY_ = other.positionY_;
          powerupType_ = other.powerupType_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PowerupState Clone() {
          return new PowerupState(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private uint id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "position_x" field.</summary>
        public const int PositionXFieldNumber = 2;
        private uint positionX_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PositionX {
          get { return positionX_; }
          set {
            positionX_ = value;
          }
        }

        /// <summary>Field number for the "position_y" field.</summary>
        public const int PositionYFieldNumber = 3;
        private uint positionY_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PositionY {
          get { return positionY_; }
          set {
            positionY_ = value;
          }
        }

        /// <summary>Field number for the "powerup_type" field.</summary>
        public const int PowerupTypeFieldNumber = 4;
        private global::Pgame.GameState.Types.PowerupState.Types.Type powerupType_ = global::Pgame.GameState.Types.PowerupState.Types.Type.Unknown;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Pgame.GameState.Types.PowerupState.Types.Type PowerupType {
          get { return powerupType_; }
          set {
            powerupType_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PowerupState);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PowerupState other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (PositionX != other.PositionX) return false;
          if (PositionY != other.PositionY) return false;
          if (PowerupType != other.PowerupType) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0) hash ^= Id.GetHashCode();
          if (PositionX != 0) hash ^= PositionX.GetHashCode();
          if (PositionY != 0) hash ^= PositionY.GetHashCode();
          if (PowerupType != global::Pgame.GameState.Types.PowerupState.Types.Type.Unknown) hash ^= PowerupType.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
          if (PositionX != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(PositionX);
          }
          if (PositionY != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(PositionY);
          }
          if (PowerupType != global::Pgame.GameState.Types.PowerupState.Types.Type.Unknown) {
            output.WriteRawTag(32);
            output.WriteEnum((int) PowerupType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
          if (PositionX != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(PositionX);
          }
          if (PositionY != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(PositionY);
          }
          if (PowerupType != global::Pgame.GameState.Types.PowerupState.Types.Type.Unknown) {
            output.WriteRawTag(32);
            output.WriteEnum((int) PowerupType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          if (PositionX != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PositionX);
          }
          if (PositionY != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PositionY);
          }
          if (PowerupType != global::Pgame.GameState.Types.PowerupState.Types.Type.Unknown) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PowerupType);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PowerupState other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0) {
            Id = other.Id;
          }
          if (other.PositionX != 0) {
            PositionX = other.PositionX;
          }
          if (other.PositionY != 0) {
            PositionY = other.PositionY;
          }
          if (other.PowerupType != global::Pgame.GameState.Types.PowerupState.Types.Type.Unknown) {
            PowerupType = other.PowerupType;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
              case 16: {
                PositionX = input.ReadUInt32();
                break;
              }
              case 24: {
                PositionY = input.ReadUInt32();
                break;
              }
              case 32: {
                PowerupType = (global::Pgame.GameState.Types.PowerupState.Types.Type) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
              case 16: {
                PositionX = input.ReadUInt32();
                break;
              }
              case 24: {
                PositionY = input.ReadUInt32();
                break;
              }
              case 32: {
                PowerupType = (global::Pgame.GameState.Types.PowerupState.Types.Type) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the PowerupState message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum Type {
            [pbr::OriginalName("UNKNOWN")] Unknown = 0,
            [pbr::OriginalName("BOMB_QUANTITY")] BombQuantity = 1,
            [pbr::OriginalName("BOMB_RANGE")] BombRange = 2,
            [pbr::OriginalName("SPEEDUP")] Speedup = 3,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
